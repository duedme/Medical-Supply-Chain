/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type Medicina_estadoInput = {
  caducidad: BigNumberish;
  buen_estado: boolean;
  empaque_seguro: boolean;
};

export type Medicina_estadoOutput = {
  caducidad: number;
  buen_estado: boolean;
  empaque_seguro: boolean;
};

export type MedicinaInput = {
  numero_de_lote: BigNumberish;
  unidad_aplicada: BigNumberish;
};

export type MedicinaOutput = {
  numero_de_lote: number;
  unidad_aplicada: number;
};

export type SuministroInput = {
  fabricacion: OptionalMedicinaEstadoInput;
  distribucion: OptionalMedicinaEstadoInput;
  entrega: OptionalMedicinaEstadoInput;
  utilizacion: OptionalMedicinaEstadoInput;
};

export type SuministroOutput = {
  fabricacion: OptionalMedicinaEstadoOutput;
  distribucion: OptionalMedicinaEstadoOutput;
  entrega: OptionalMedicinaEstadoOutput;
  utilizacion: OptionalMedicinaEstadoOutput;
};

export type OptionalMedicinaEstadoInput = Option<Medicina_estadoInput>;

export type OptionalMedicinaEstadoOutput = Option<Medicina_estadoOutput>;

interface SupplyChainAbiInterface extends Interface {
  functions: {
    agregar_estado_en_distribucion: FunctionFragment;
    agregar_estado_en_entrega: FunctionFragment;
    agregar_estado_en_fabricacion: FunctionFragment;
    agregar_estado_en_utilizacion: FunctionFragment;
    obtener_buen_estado: FunctionFragment;
    obtener_caducidad: FunctionFragment;
    obtener_empaque_seguro: FunctionFragment;
    obtener_estado_distribucion: FunctionFragment;
    obtener_estado_entrega: FunctionFragment;
    obtener_estado_fabrica: FunctionFragment;
    obtener_estado_utilizacion: FunctionFragment;
    obtener_id_distribucion: FunctionFragment;
    obtener_id_entrega: FunctionFragment;
    obtener_id_fabricacion: FunctionFragment;
    obtener_id_utilzacion: FunctionFragment;
    obtener_medicina: FunctionFragment;
    sum: FunctionFragment;
    asignar_id_distribucion: FunctionFragment;
    asignar_id_entrega: FunctionFragment;
    asignar_id_fabricacion: FunctionFragment;
    asignar_id_utilizacion: FunctionFragment;
    asignar_numero_de_lote: FunctionFragment;
    asignar_unidad_en_lote: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "agregar_estado_en_distribucion",
    values: [BigNumberish, boolean, boolean]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "agregar_estado_en_entrega",
    values: [BigNumberish, boolean, boolean]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "agregar_estado_en_fabricacion",
    values: [BigNumberish, boolean, boolean]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "agregar_estado_en_utilizacion",
    values: [BigNumberish, boolean, boolean]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_buen_estado",
    values: [Medicina_estadoInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_caducidad",
    values: [Medicina_estadoInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_empaque_seguro",
    values: [Medicina_estadoInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_estado_distribucion",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_estado_entrega",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_estado_fabrica",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_estado_utilizacion",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_id_distribucion",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_id_entrega",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_id_fabricacion",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_id_utilzacion",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "obtener_medicina",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(functionFragment: "sum", values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: "asignar_id_distribucion",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "asignar_id_entrega",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "asignar_id_fabricacion",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "asignar_id_utilizacion",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "asignar_numero_de_lote",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "asignar_unidad_en_lote",
    values: [BigNumberish]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "agregar_estado_en_distribucion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "agregar_estado_en_entrega",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "agregar_estado_en_fabricacion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "agregar_estado_en_utilizacion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_buen_estado",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_caducidad",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_empaque_seguro",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_estado_distribucion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_estado_entrega",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_estado_fabrica",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_estado_utilizacion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_id_distribucion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_id_entrega",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_id_fabricacion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_id_utilzacion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "obtener_medicina",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "sum", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "asignar_id_distribucion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "asignar_id_entrega",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "asignar_id_fabricacion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "asignar_id_utilizacion",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "asignar_numero_de_lote",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "asignar_unidad_en_lote",
    data: BytesLike
  ): DecodedValue;
}

export class SupplyChainAbi extends Contract {
  interface: SupplyChainAbiInterface;
  functions: {
    agregar_estado_en_distribucion: InvokeFunction<
      [caducidad: BigNumberish, buen_estado: boolean, empaque_seguro: boolean],
      void
    >;

    agregar_estado_en_entrega: InvokeFunction<
      [caducidad: BigNumberish, buen_estado: boolean, empaque_seguro: boolean],
      void
    >;

    agregar_estado_en_fabricacion: InvokeFunction<
      [caducidad: BigNumberish, buen_estado: boolean, empaque_seguro: boolean],
      void
    >;

    agregar_estado_en_utilizacion: InvokeFunction<
      [caducidad: BigNumberish, buen_estado: boolean, empaque_seguro: boolean],
      void
    >;

    obtener_buen_estado: InvokeFunction<[med: Medicina_estadoInput], boolean>;

    obtener_caducidad: InvokeFunction<[med: Medicina_estadoInput], number>;

    obtener_empaque_seguro: InvokeFunction<
      [med: Medicina_estadoInput],
      boolean
    >;

    obtener_estado_distribucion: InvokeFunction<[], Medicina_estadoOutput>;

    obtener_estado_entrega: InvokeFunction<[], Medicina_estadoOutput>;

    obtener_estado_fabrica: InvokeFunction<[], Medicina_estadoOutput>;

    obtener_estado_utilizacion: InvokeFunction<[], Medicina_estadoOutput>;

    obtener_id_distribucion: InvokeFunction<[], string>;

    obtener_id_entrega: InvokeFunction<[], string>;

    obtener_id_fabricacion: InvokeFunction<[], string>;

    obtener_id_utilzacion: InvokeFunction<[], string>;

    obtener_medicina: InvokeFunction<
      [identificador_paciente: BigNumberish],
      MedicinaOutput
    >;

    sum: InvokeFunction<[], SuministroOutput>;

    asignar_id_distribucion: InvokeFunction<[addr: string], void>;

    asignar_id_entrega: InvokeFunction<[addr: string], void>;

    asignar_id_fabricacion: InvokeFunction<[addr: string], void>;

    asignar_id_utilizacion: InvokeFunction<[addr: string], void>;

    asignar_numero_de_lote: InvokeFunction<[], void>;

    asignar_unidad_en_lote: InvokeFunction<
      [max_number_of_units: BigNumberish],
      void
    >;
  };
}
